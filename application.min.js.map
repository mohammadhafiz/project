{"version":3,"sources":["application.js","routes.js","en.js","ms.js","access_control_controller.js","login_controller.js","modules_controller.js","access_control/clients_controller.js","access_control/users_controller.js","access_control/clients/create_controller.js","access_control/users/create_controller.js","access_control/users/read_controller.js","api.js","auth.js","client.js","http_interceptor.js","user.js"],"names":["application","angular","module","config","$httpProvider","defaults","headers","common","Accept","post","Content-Type","put","delete","interceptors","push","$mdThemingProvider","alwaysWatchTheme","theme","primaryPalette","accentPalette","default","$translateProvider","useSanitizeValueStrategy","preferredLanguage","$locationProvider","$routeProvider","html5Mode","hashPrefix","when","controller","templateUrl","resolve","isGuest","Auth","isLogged","session","user","$route","User","get","user_id","current","params","$promise","otherwise","redirectTo","run","$location","$rootScope","$on","event","previous","rejection","path","forget","translations","action_back","action_cancel","action_create","action_create_user","action_delete","action_login","action_logout","action_menu","action_more","action_search","dialog_content_delete_record","dialog_title_delete_record","label_created_at","label_name","label_password","label_password_confirmation","label_updated_at","label_username","placeholder","title_access_control","title_arrears_management","title_client_management","title_grant_management","title_login","title_menu","title_modules","title_record_count","title_scope_management","title_settings","title_user_management","toast_incorrect_credentials","toast_invalid_refresh_token","toast_validation_failed","validation_maxlength_24","validation_maxlength_250","validation_minlength_4","validation_required","button_login","$scope","modules","clientManagement","grantManagement","scopeManagement","userManagement","credentials","username","password","login","verify","then","$timeout","accessControl","logout","$mdDialog","$mdSidenav","$translate","Client","limit","page","clients","create","$event","confirm","title","content","ok","cancel","targetEvent","dialog","show","client_id","client","id","splice","indexOf","load","options","skip","query","data","length","concat","menu","open","read","regex","actual","expected","match","RegExp","users","name","$save","back","password_confirmation","add","factory","Settings","api","access_token","scopes","grants","grantScopes","clientGrants","clientScopes","endpoint","host","$http","$q","$window","API","auth","deferred","defer","localStorage","removeItem","promise","handler","response","expires_in","refresh_token","token_type","reject","hasOwnProperty","refresh","grant_type","client_secret","scope","join","$resource","method","save","isArray","update","$injector","refreshPromise","httpInterceptor","request","Authorization","responseError","console","error","status","text","$mdToast","toast","simple","position","message"],"mappings":"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","file":"application.min.js","sourcesContent":["var application = angular.module('application', [\r\n    'ngAnimate',\r\n    'ngAria',\r\n    'ngMaterial',\r\n    'ngMessageFormat',\r\n    'ngMessages',\r\n    'ngResource',\r\n    'ngRoute',\r\n    'ngSanitize',\r\n    'pascalprecht.translate', // angular-translate\r\n    'application.settings', // application settings\r\n    'application.templates', // application templates cache\r\n]);\r\n\r\napplication.config(['$httpProvider',\r\n    function($httpProvider)\r\n    {\r\n        $httpProvider.defaults.headers = {\r\n            common: {\r\n                Accept: 'application/vnd.menggaris.v1+json',\r\n            },\r\n            post: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            put: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            delete: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        };\r\n\r\n        $httpProvider.interceptors.push('HttpInterceptor');\r\n    }]);\r\n\r\napplication.config(['$mdThemingProvider',\r\n    function($mdThemingProvider)\r\n    {\r\n        $mdThemingProvider.alwaysWatchTheme(true);\r\n\r\n        $mdThemingProvider.theme('red')\r\n            .primaryPalette('red')\r\n            .accentPalette('indigo');\r\n\r\n        $mdThemingProvider.theme('white')\r\n            .primaryPalette('grey', {\r\n                default: '200',\r\n            })\r\n            .accentPalette('blue');\r\n    }]);\r\n\r\napplication.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.useSanitizeValueStrategy('sanitize');\r\n        $translateProvider.preferredLanguage('en');\r\n    }]);\r\n","application.config(['$locationProvider', '$routeProvider',\r\n    function($locationProvider, $routeProvider)\r\n    {\r\n        $locationProvider.html5Mode(true)\r\n            .hashPrefix('#!');\r\n\r\n        $routeProvider\r\n            .when('/login', {\r\n                controller: 'LoginController',\r\n                templateUrl: 'login.html',\r\n                resolve: {\r\n                    isGuest: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isGuest();\r\n                    }],\r\n                },\r\n            })\r\n            .when('/modules', {\r\n                controller: 'ModulesController',\r\n                templateUrl: 'modules.html',\r\n                resolve: {\r\n                    isLogged: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isLogged();\r\n                    }],\r\n                    session: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.session();\r\n                    }],\r\n                },\r\n            })\r\n            .when('/access_control/users', {\r\n                controller: 'AccessControlUsersController',\r\n                templateUrl: 'access_control/users.html',\r\n                resolve: {\r\n                    isLogged: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isLogged();\r\n                    }],\r\n                },\r\n            })\r\n            .when('/access_control/users/create', {\r\n                controller: 'AccessControlUsersCreateController',\r\n                templateUrl: 'access_control/users/create.html',\r\n                resolve: {\r\n                    isLogged: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isLogged();\r\n                    }],\r\n                },\r\n            })\r\n            .when('/access_control/users/:user_id', {\r\n                controller: 'AccessControlUsersReadController',\r\n                templateUrl: 'access_control/users/read.html',\r\n                resolve: {\r\n                    isLogged: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isLogged();\r\n                    }],\r\n                    user: ['$route', 'User', function($route, User)\r\n                    {\r\n                        return User.get({\r\n                            user_id: $route.current.params.user_id,\r\n                        }).$promise;\r\n                    }],\r\n                },\r\n            })\r\n            .when('/access_control/clients', {\r\n                controller: 'AccessControlClientsController',\r\n                templateUrl: 'access_control/clients.html',\r\n                resolve: {\r\n                    isLogged: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isLogged();\r\n                    }],\r\n                },\r\n            })\r\n            .when('/access_control/clients/create', {\r\n                controller: 'AccessControlClientsCreateController',\r\n                templateUrl: 'access_control/clients/create.html',\r\n                resolve: {\r\n                    isLogged: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isLogged();\r\n                    }],\r\n                },\r\n            })\r\n            .when('/access_control/grants', {})\r\n            .when('/access_control/scopes', {})\r\n            .otherwise({\r\n                redirectTo: '/login',\r\n            });\r\n    }]);\r\n\r\napplication.run(['$location', '$rootScope', 'Auth',\r\n    function($location, $rootScope, Auth)\r\n    {\r\n        $rootScope.$on('$routeChangeError', function(event, current, previous, rejection)\r\n        {\r\n            switch (rejection) {\r\n                case 'auth.is_guest':\r\n                    $location.path('/modules');\r\n                    break;\r\n                case 'auth.is_logged':\r\n                    Auth.forget();\r\n                    break;\r\n            }\r\n        });\r\n    }]);\r\n","application.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.translations('en', {\r\n            'action_back': 'Go back',\r\n            'action_cancel': 'Cancel',\r\n            'action_create': 'Create',\r\n            'action_create_user': 'Create new user',\r\n            'action_delete': 'Delete',\r\n            'action_login': 'Log in',\r\n            'action_logout': 'Log out',\r\n            'action_menu': 'Menu',\r\n            'action_more': 'More',\r\n            'action_search': 'Search',\r\n\r\n            'dialog_content_delete_record': 'Deleted record cannot be restored.',\r\n            'dialog_title_delete_record': 'Would you like to delete this record?',\r\n\r\n            'label_created_at': 'Created At',\r\n            'label_name': 'Name',\r\n            'label_password': 'Password',\r\n            'label_password_confirmation': 'Password Confirmation',\r\n            'label_updated_at': 'Updated At',\r\n            'label_username': 'Username',\r\n\r\n            'placeholder': 'Placeholder',\r\n\r\n            'title_access_control': 'Access Control',\r\n            'title_arrears_management': 'Arrears Management',\r\n            'title_client_management': 'Client Management',\r\n            'title_grant_management': 'Grant Management',\r\n            'title_login': 'Log In',\r\n            'title_menu': 'Menu',\r\n            'title_modules': 'Module List',\r\n            'title_record_count': 'Showing total of {{ length }} record',\r\n            'title_scope_management': 'Scope Management',\r\n            'title_settings': 'Settings',\r\n            'title_user_management': 'User Management',\r\n\r\n            'toast_incorrect_credentials': 'The user credentials is incorrect.',\r\n            'toast_invalid_refresh_token': 'The refresh token is invalid.',\r\n            'toast_validation_failed': 'Validation failed on server.',\r\n\r\n            'validation_maxlength_24': 'This field may not be greater than 24 characters.',\r\n            'validation_maxlength_250': 'This field may not be greater than 250 characters.',\r\n            'validation_minlength_4': 'This field must be at least 4 characters.',\r\n            'validation_required': 'This field is required.',\r\n        });\r\n    }]);\r\n","application.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.translations('ms', {\r\n            'title_login': 'Log masuk',\r\n            'label_username': 'Kata nama',\r\n            'label_password': 'Kata kunci',\r\n            'button_login': 'Log masuk',\r\n        });\r\n    }]);\r\n","application.controller('AccessControlController', ['$location', '$scope',\r\n    function($location, $scope)\r\n    {\r\n        $scope.modules = function()\r\n        {\r\n            $location.path('/modules');\r\n        };\r\n\r\n        $scope.clientManagement = function()\r\n        {\r\n            $location.path('/access_control/clients');\r\n        };\r\n\r\n        $scope.grantManagement = function()\r\n        {\r\n            $location.path('/access_control/grants');\r\n        };\r\n\r\n        $scope.scopeManagement = function()\r\n        {\r\n            $location.path('/access_control/scopes');\r\n        };\r\n\r\n        $scope.userManagement = function()\r\n        {\r\n            $location.path('/access_control/users');\r\n        };\r\n    }]);\r\n","application.controller('LoginController', ['$location', '$scope', 'Auth', 'isGuest',\r\n    function($location, $scope, Auth, isGuest)\r\n    {\r\n        $scope.credentials = {\r\n            username: '',\r\n            password: '',\r\n        };\r\n\r\n        $scope.login = function(credentials)\r\n        {\r\n            Auth.verify(credentials)\r\n                .then(function (session) {\r\n                    $location.path('/modules');\r\n                });\r\n        };\r\n    }]);\r\n","application.controller('ModulesController', ['$location', '$scope', '$timeout', 'Auth', 'isLogged', 'session',\r\n    function($location, $scope, $timeout, Auth, isLogged, session)\r\n    {\r\n        $scope.accessControl = function()\r\n        {\r\n            $timeout(function()\r\n            {\r\n                $location.path('/access_control/users');\r\n            }, 500);\r\n        };\r\n\r\n        $scope.logout = function()\r\n        {\r\n            $timeout(function()\r\n            {\r\n                Auth.forget();\r\n            }, 500);\r\n        };\r\n    }]);\r\n","application.controller('AccessControlClientsController', ['$location', '$mdDialog', '$mdSidenav', '$scope', '$translate', 'Client',\r\n    function($location, $mdDialog, $mdSidenav, $scope, $translate, Client)\r\n    {\r\n        $scope.limit = 50;\r\n        $scope.page = 0;\r\n        $scope.theme = 'red';\r\n        $scope.clients = [];\r\n\r\n        $scope.create = function()\r\n        {\r\n            $location.path('/access_control/clients/create');\r\n        };\r\n\r\n        $scope.delete = function($event, user)\r\n        {\r\n            $translate([\r\n                'dialog_title_delete_record',\r\n                'dialog_content_delete_record',\r\n                'action_delete',\r\n                'action_cancel',\r\n            ])\r\n            .then(function(translations)\r\n            {\r\n                return $mdDialog.confirm()\r\n                    .title(translations.dialog_title_delete_record)\r\n                    .content(translations.dialog_content_delete_record)\r\n                    .ok(translations.action_delete)\r\n                    .cancel(translations.action_cancel)\r\n                    .targetEvent($event);\r\n            })\r\n            .then(function(dialog)\r\n            {\r\n                return $mdDialog.show(dialog);\r\n            })\r\n            .then(function()\r\n            {\r\n                return Client.delete({\r\n                    client_id: client.id,\r\n                }).$promise;\r\n            })\r\n            .then(function()\r\n            {\r\n                $scope.clients.splice($scope.clients.indexOf(client), 1);\r\n                $location.path('/access_control/clients');\r\n            });\r\n        };\r\n\r\n        $scope.load = function()\r\n        {\r\n            var options = {};\r\n            options.limit = $scope.limit;\r\n            if (++$scope.page > 1) options.skip = $scope.limit * ($scope.page - 1);\r\n\r\n            Client.query(options).$promise\r\n                .then(function(clients)\r\n                {\r\n                    if (clients.data.length < 1) return;\r\n                    $scope.clients = $scope.clients.concat(clients.data);\r\n                    $scope.load();\r\n                });\r\n        };\r\n\r\n        $scope.menu = function()\r\n        {\r\n            $mdSidenav('menu').open();\r\n        };\r\n\r\n        $scope.read = function(client)\r\n        {\r\n            $location.path('/access_control/clients/' + client.id);\r\n        };\r\n\r\n        $scope.regex = function(actual, expected)\r\n        {\r\n            return actual.match(new RegExp(expected, 'i'));\r\n        };\r\n\r\n        $scope.load();\r\n    }]);\r\n","application.controller('AccessControlUsersController', ['$location', '$mdDialog', '$mdSidenav', '$scope', '$translate', 'User',\r\n    function($location, $mdDialog, $mdSidenav, $scope, $translate, User)\r\n    {\r\n        $scope.limit = 50;\r\n        $scope.page = 0;\r\n        $scope.theme = 'red';\r\n        $scope.users = [];\r\n\r\n        $scope.create = function()\r\n        {\r\n            $location.path('/access_control/users/create');\r\n        };\r\n\r\n        $scope.delete = function($event, user)\r\n        {\r\n            $translate([\r\n                'dialog_title_delete_record',\r\n                'dialog_content_delete_record',\r\n                'action_delete',\r\n                'action_cancel',\r\n            ])\r\n            .then(function(translations)\r\n            {\r\n                return $mdDialog.confirm()\r\n                    .title(translations.dialog_title_delete_record)\r\n                    .content(translations.dialog_content_delete_record)\r\n                    .ok(translations.action_delete)\r\n                    .cancel(translations.action_cancel)\r\n                    .targetEvent($event);\r\n            })\r\n            .then(function(dialog)\r\n            {\r\n                return $mdDialog.show(dialog);\r\n            })\r\n            .then(function()\r\n            {\r\n                return User.delete({\r\n                    user_id: user.id,\r\n                }).$promise;\r\n            })\r\n            .then(function()\r\n            {\r\n                $scope.users.splice($scope.users.indexOf(user), 1);\r\n                $location.path('/access_control/users');\r\n            });\r\n        };\r\n\r\n        $scope.load = function()\r\n        {\r\n            var options = {};\r\n            options.limit = $scope.limit;\r\n            if (++$scope.page > 1) options.skip = $scope.limit * ($scope.page - 1);\r\n\r\n            User.query(options).$promise\r\n                .then(function(users)\r\n                {\r\n                    if (users.data.length < 1) return;\r\n                    $scope.users = $scope.users.concat(users.data);\r\n                    $scope.load();\r\n                });\r\n        };\r\n\r\n        $scope.menu = function()\r\n        {\r\n            $mdSidenav('menu').open();\r\n        };\r\n\r\n        $scope.read = function(user)\r\n        {\r\n            $location.path('/access_control/users/' + user.id);\r\n        };\r\n\r\n        $scope.regex = function(actual, expected)\r\n        {\r\n            return actual.match(new RegExp(expected, 'i'));\r\n        };\r\n\r\n        $scope.load();\r\n    }]);\r\n","application.controller('AccessControlClientsCreateController', ['$location', '$scope', 'Client',\r\n    function($location, $scope, Client)\r\n    {\r\n        $scope.data = {\r\n            name: '',\r\n        };\r\n\r\n        $scope.create = function(data)\r\n        {\r\n            var client = new Client(data);\r\n\r\n            client.$save()\r\n                .then(function()\r\n                {\r\n                    $location.path('/access_control/clients');\r\n                });\r\n        };\r\n\r\n        $scope.back = function()\r\n        {\r\n            $location.path('/access_control/clients');\r\n        };\r\n    }]);\r\n","application.controller('AccessControlUsersCreateController', ['$location', '$scope', 'User',\r\n    function($location, $scope, User)\r\n    {\r\n        $scope.data = {\r\n            username: '',\r\n            password: '',\r\n            password_confirmation: '',\r\n        };\r\n\r\n        $scope.add = function(data)\r\n        {\r\n            var user = new User(data);\r\n\r\n            user.$save()\r\n                .then(function()\r\n                {\r\n                    $location.path('/access_control/users');\r\n                })\r\n        };\r\n\r\n        $scope.back = function()\r\n        {\r\n            $location.path('/access_control/users');\r\n        };\r\n    }]);\r\n","application.controller('AccessControlUsersReadController', ['$location', '$mdDialog', '$scope', '$translate', 'User', 'user',\r\n    function($location, $mdDialog, $scope, $translate, User, user)\r\n    {\r\n        $scope.user = user.data;\r\n\r\n        $scope.back = function()\r\n        {\r\n            $location.path('/access_control/users');\r\n        };\r\n\r\n        $scope.delete = function($event, id)\r\n        {\r\n            $translate([\r\n                'dialog_title_delete_record',\r\n                'dialog_content_delete_record',\r\n                'action_delete',\r\n                'action_cancel',\r\n            ])\r\n            .then(function(translations)\r\n            {\r\n                return $mdDialog.confirm()\r\n                    .title(translations.dialog_title_delete_record)\r\n                    .content(translations.dialog_content_delete_record)\r\n                    .ok(translations.action_delete)\r\n                    .cancel(translations.action_cancel)\r\n                    .targetEvent($event);\r\n            }).then(function(dialog)\r\n            {\r\n                return $mdDialog.show(dialog);\r\n            })\r\n            .then(function()\r\n            {\r\n                return User.delete({\r\n                    user_id: id,\r\n                }).$promise;\r\n            })\r\n            .then(function()\r\n            {\r\n                $location.path('/access_control/users');\r\n            });\r\n        };\r\n    }]);\r\n","application.factory('API', ['Settings',\r\n    function(Settings)\r\n    {\r\n        var api = {};\r\n\r\n        api.access_token    = '/api/access_token';\r\n        api.session         = '/api/session';\r\n        api.users           = '/api/users/:user_id';\r\n        api.scopes          = '/api/scopes/:scope_id';\r\n        api.grants          = '/api/grants/:grant_id';\r\n        api.grantScopes     = '/api/grants/:grant_id/scopes/:scope_id';\r\n        api.clients         = '/api/clients/:client_id';\r\n        api.clientGrants    = '/api/clients/:client_id/grants/:grant_id';\r\n        api.clientScopes    = '/api/clients/:client_id/scopes/:scope_id';\r\n\r\n        api.get = function(endpoint)\r\n        {\r\n            return Settings.host.concat(api[endpoint]);\r\n        };\r\n\r\n        return api;\r\n    }]);\r\n","application.factory('Auth', ['$http', '$location', '$q', '$window', 'API', 'Settings',\r\n    function($http, $location, $q, $window, API, Settings)\r\n    {\r\n        var auth = {};\r\n\r\n        auth.forget = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            $window.localStorage.removeItem('expires_in');\r\n            $window.localStorage.removeItem('access_token');\r\n            $window.localStorage.removeItem('refresh_token');\r\n            $window.localStorage.removeItem('token_type');\r\n            $location.path('/login');\r\n\r\n            deferred.resolve();\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.handler = function(response)\r\n        {\r\n            $window.localStorage.expires_in      = response.data.expires_in;\r\n            $window.localStorage.access_token    = response.data.access_token;\r\n            $window.localStorage.refresh_token   = response.data.refresh_token;\r\n            $window.localStorage.token_type      = response.data.token_type;\r\n            return response;\r\n        };\r\n\r\n        auth.isGuest = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            auth.isLogged()\r\n                .then(function()\r\n                {\r\n                    deferred.reject('auth.is_guest');\r\n                })\r\n                .catch(function()\r\n                {\r\n                    deferred.resolve(true);\r\n                });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.isLogged = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            if ($window.localStorage.hasOwnProperty('expires_in') &&\r\n                $window.localStorage.hasOwnProperty('access_token') &&\r\n                $window.localStorage.hasOwnProperty('refresh_token') &&\r\n                $window.localStorage.hasOwnProperty('token_type')) {\r\n                deferred.resolve(true);\r\n            } else {\r\n                deferred.reject('auth.is_logged');\r\n            }\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.refresh = function()\r\n        {\r\n            var data = {\r\n                grant_type: 'refresh_token',\r\n                client_id: Settings.client_id,\r\n                client_secret: Settings.client_secret,\r\n                scope: Settings.scopes.join(),\r\n                refresh_token: $window.localStorage.refresh_token,\r\n            };\r\n\r\n            return $http.post(API.get('access_token'), data)\r\n                .then(auth.handler);\r\n        };\r\n\r\n        auth.session = function()\r\n        {\r\n            return $http.get(API.get('session'));\r\n        };\r\n\r\n        auth.verify = function(credentials)\r\n        {\r\n            var data = {\r\n                grant_type: 'password',\r\n                client_id: Settings.client_id,\r\n                client_secret: Settings.client_secret,\r\n                scope: Settings.scopes.join(),\r\n                username: credentials['username'],\r\n                password: credentials['password'],\r\n            };\r\n\r\n            return $http.post(API.get('access_token'), data)\r\n                .then(auth.handler);\r\n        };\r\n\r\n        return auth;\r\n    }]);\r\n\r\n","application.factory('Client', ['$resource', 'API',\r\n    function($resource, API)\r\n    {\r\n        return $resource(API.get('clients'), {\r\n            client_id: '@id',\r\n        }, {\r\n            delete: {\r\n                method: 'DELETE',\r\n            },\r\n            get: {\r\n                method: 'GET',\r\n            },\r\n            save: {\r\n                method: 'POST',\r\n            },\r\n            query: {\r\n                method: 'GET',\r\n                isArray: false,\r\n            },\r\n            update: {\r\n                method: 'PUT',\r\n            },\r\n        });\r\n    }]);\r\n","application.factory('HttpInterceptor', ['$injector', '$q', '$translate', '$window',\r\n    function($injector, $q, $translate, $window)\r\n    {\r\n        var refreshPromise = null;\r\n\r\n        var httpInterceptor = {};\r\n\r\n        httpInterceptor.request = function(config)\r\n        {\r\n            if ($injector.get('Auth').isLogged()) {\r\n                var token_type = $window.localStorage.token_type;\r\n                var access_token = $window.localStorage.access_token;\r\n                config.headers.Authorization = token_type + ' ' + access_token;\r\n            }\r\n\r\n            return config;\r\n        };\r\n\r\n        httpInterceptor.responseError = function(rejection)\r\n        {\r\n            console.error(rejection);\r\n\r\n            switch (rejection.status) {\r\n                case 401:\r\n                    refreshPromise = refreshPromise ? refreshPromise :\r\n                        $injector.get('Auth').refresh();\r\n\r\n                    return refreshPromise.finally(function()\r\n                        {\r\n                            refreshPromise = null;\r\n                        })\r\n                        .then(function()\r\n                        {\r\n                            return $injector.get('$http')(rejection.config);\r\n                        });\r\n\r\n                case 422:\r\n                    $translate('toast_validation_failed')\r\n                        .then(function(text)\r\n                        {\r\n                            var $mdToast = $injector.get('$mdToast');\r\n                            var toast = $mdToast.simple()\r\n                                .content(text)\r\n                                .position('bottom left right');\r\n                            $mdToast.show(toast);\r\n                        });\r\n\r\n                    return $q.reject(rejection);\r\n\r\n                case 500:\r\n                    if (rejection.data.message == 'The user credentials were incorrect.') {\r\n                        $translate('toast_incorrect_credentials')\r\n                            .then(function(text)\r\n                            {\r\n                                var $mdToast = $injector.get('$mdToast');\r\n                                var toast = $mdToast.simple()\r\n                                    .content(text)\r\n                                    .position('bottom left right');\r\n                                $mdToast.show(toast);\r\n                            });\r\n\r\n                        return $q.reject(rejection);\r\n                    }\r\n\r\n                    if (rejection.data.message == 'The refresh token is invalid.') {\r\n                        $translate('toast_invalid_refresh_token')\r\n                            .then(function(text)\r\n                            {\r\n                                var $mdToast = $injector.get('$mdToast');\r\n                                var toast = $mdToast.simple()\r\n                                    .content(text)\r\n                                    .position('bottom left right');\r\n                                $mdToast.show(toast);\r\n                            });\r\n                    }\r\n\r\n                    $injector.get('Auth')\r\n                        .forget();\r\n\r\n                    return $q.reject(rejection);\r\n            }\r\n        };\r\n\r\n        return httpInterceptor;\r\n    }]);\r\n","application.factory('User', ['$resource', 'API',\r\n    function($resource, API)\r\n    {\r\n        return $resource(API.get('users'), {\r\n                user_id: '@id',\r\n            }, {\r\n                delete: {\r\n                    method: 'DELETE',\r\n                },\r\n                get: {\r\n                    method: 'GET',\r\n                },\r\n                save: {\r\n                    method: 'POST',\r\n                },\r\n                query: {\r\n                    method: 'GET',\r\n                    isArray: false,\r\n                },\r\n                update: {\r\n                    method: 'PUT',\r\n                },\r\n            });\r\n    }]);\r\n"],"sourceRoot":"/source/"}