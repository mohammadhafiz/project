{"version":3,"sources":["application.js","en.js","ms.js","access_control_users_create.js","access_control_users_index.js","login_controller.js","modules_controller.js","api.js","auth.js","settings.js","user.js"],"names":["application","angular","module","config","$locationProvider","$routeProvider","html5Mode","hashPrefix","when","controller","templateUrl","resolve","isGuest","Auth","isLogged","session","otherwise","redirectTo","run","$location","$rootScope","$on","event","current","previous","rejection","path","forget","$mdThemingProvider","alwaysWatchTheme","theme","primaryPalette","accentPalette","default","$translateProvider","useSanitizeValueStrategy","preferredLanguage","$httpProvider","defaults","headers","common","Accept","post","Content-Type","put","delete","interceptors","push","translations","action_add","action_back","action_login","action_logout","action_menu","action_search","action_add_user","label_password","label_username","label_password_confirmation","placeholder","title_access_control","title_actions","title_arrears_management","title_client_management","title_grant_management","title_login","title_modules","title_scope_management","title_settings","title_user_management","toast_incorrect_credentials","toast_invalid_refresh_token","toast_validation_failed","validation_maxlength_24","validation_minlength_4","validation_required","button_login","$scope","User","data","username","password","password_confirmation","add","user","$save","then","back","$mdSidenav","$mdUtil","users","menu","open","modules","regex","actual","expected","match","RegExp","userManagement","close","page","limit","load","options","skip","query","$promise","length","concat","credentials","login","verify","$timeout","accessControl","logout","factory","Settings","api","access_token","scopes","grants","grantScopes","clients","clientGrants","clientScopes","get","endpoint","host","$http","$q","$window","API","auth","deferred","defer","localStorage","removeItem","promise","handler","response","expires_in","refresh_token","token_type","reject","hasOwnProperty","refresh","grant_type","client_id","client_secret","scope","join","$injector","$translate","refreshPromise","authInterceptor","request","Authorization","responseError","console","error","status","text","$mdToast","toast","simple","content","position","show","message","settings","$resource","user_id","method","save","isArray","update"],"mappings":"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","file":"application.min.js","sourcesContent":["var application = angular.module('application', [\r\n    'ngAnimate',\r\n    'ngAria',\r\n    'ngMaterial',\r\n    'ngMessageFormat',\r\n    'ngMessages',\r\n    'ngResource',\r\n    'ngRoute',\r\n    'ngSanitize',\r\n    'pascalprecht.translate', // angular-translate\r\n    'application.templates', // application templates cache\r\n]);\r\n\r\napplication.config(['$locationProvider', '$routeProvider',\r\n    function($locationProvider, $routeProvider)\r\n    {\r\n        $locationProvider.html5Mode(true)\r\n            .hashPrefix('#!');\r\n\r\n        $routeProvider\r\n            .when('/login', {\r\n                controller: 'LoginController',\r\n                templateUrl: '/templates/login.html',\r\n                resolve: {\r\n                    isGuest: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isGuest();\r\n                    }],\r\n                },\r\n            })\r\n            .when('/modules', {\r\n                controller: 'ModulesController',\r\n                templateUrl: '/templates/modules.html',\r\n                resolve: {\r\n                    isLogged: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isLogged();\r\n                    }],\r\n                    session: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.session();\r\n                    }],\r\n                },\r\n            })\r\n            .when('/access_control/users', {\r\n                controller: 'AccessControlUsersIndex',\r\n                templateUrl: '/templates/access_control_users_index.html',\r\n                resolve: {\r\n                    isLogged: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isLogged();\r\n                    }],\r\n                },\r\n            })\r\n            .when('/access_control/users/add', {\r\n                controller: 'AccessControlUsersCreate',\r\n                templateUrl: '/templates/access_control_users_create.html',\r\n            })\r\n            .otherwise({\r\n                redirectTo: '/login',\r\n            });\r\n    }]);\r\n\r\napplication.run(['$location', '$rootScope', 'Auth',\r\n    function($location, $rootScope, Auth)\r\n    {\r\n        $rootScope.$on('$routeChangeError', function(event, current, previous, rejection)\r\n        {\r\n            switch (rejection) {\r\n                case 'auth.is_guest':\r\n                    $location.path('/modules');\r\n                    break;\r\n                case 'auth.is_logged':\r\n                    Auth.forget();\r\n                    break;\r\n            }\r\n        });\r\n    }]);\r\n\r\napplication.config(['$mdThemingProvider',\r\n    function($mdThemingProvider)\r\n    {\r\n        $mdThemingProvider.alwaysWatchTheme(true);\r\n\r\n        $mdThemingProvider.theme('red')\r\n            .primaryPalette('red')\r\n            .accentPalette('blue');\r\n\r\n        $mdThemingProvider.theme('white')\r\n            .primaryPalette('grey', {\r\n                default: '200',\r\n            })\r\n            .accentPalette('blue');\r\n    }]);\r\n\r\napplication.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.useSanitizeValueStrategy('sanitize');\r\n        $translateProvider.preferredLanguage('en');\r\n    }]);\r\n\r\napplication.config(['$httpProvider',\r\n    function($httpProvider)\r\n    {\r\n        $httpProvider.defaults.headers = {\r\n            common: {\r\n                Accept: 'application/vnd.menggaris.v1+json',\r\n            },\r\n            post: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            put: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            delete: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        };\r\n\r\n        $httpProvider.interceptors.push('AuthInterceptor');\r\n    }]);\r\n","application.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.translations('en', {\r\n            'action_add': 'Add',\r\n            'action_back': 'Go back',\r\n            'action_login': 'Log in',\r\n            'action_logout': 'Log out',\r\n            'action_menu': 'Menu',\r\n            'action_search': 'Search',\r\n            'action_add_user': 'Add a new user',\r\n\r\n            'label_password': 'Password',\r\n            'label_username': 'Username',\r\n            'label_password_confirmation': 'Password Confirmation',\r\n\r\n            'placeholder': 'Placeholder',\r\n\r\n            'title_access_control': 'Access Control',\r\n            'title_actions': 'Actions',\r\n            'title_arrears_management': 'Arrears Management',\r\n            'title_client_management': 'Client Management',\r\n            'title_grant_management': 'Grant Management',\r\n            'title_login': 'Log In',\r\n            'title_modules': 'Module List',\r\n            'title_scope_management': 'Scope Management',\r\n            'title_settings': 'Settings',\r\n            'title_user_management': 'User Management',\r\n\r\n            'toast_incorrect_credentials': 'The user credentials is incorrect.',\r\n            'toast_invalid_refresh_token': 'The refresh token is invalid.',\r\n            'toast_validation_failed': 'Validation failed on server.',\r\n\r\n            'validation_maxlength_24': 'This field may not be greater than 24 characters.',\r\n            'validation_minlength_4': 'This field must be at least 4 characters.',\r\n            'validation_required': 'This field is required.',\r\n        });\r\n    }]);\r\n","application.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.translations('ms', {\r\n            'title_login': 'Log masuk',\r\n            'label_username': 'Kata nama',\r\n            'label_password': 'Kata kunci',\r\n            'button_login': 'Log masuk',\r\n        });\r\n    }]);\r\n","application.controller('AccessControlUsersCreate', ['$location', '$scope', 'User',\r\n    function($location, $scope, User)\r\n    {\r\n        $scope.data = {\r\n            username: '',\r\n            password: '',\r\n            password_confirmation: '',\r\n        };\r\n\r\n        $scope.add = function(data)\r\n        {\r\n            var user = new User(data);\r\n\r\n            user.$save()\r\n                .then(function()\r\n                {\r\n                    $location.path('/access_control/users');\r\n                })\r\n        };\r\n\r\n        $scope.back = function()\r\n        {\r\n            $location.path('/access_control/users');\r\n        };\r\n    }]);\r\n","application.controller('AccessControlUsersIndex', ['$location', '$scope', '$mdSidenav', '$mdUtil', 'User',\r\n    function($location, $scope, $mdSidenav, $mdUtil, User)\r\n    {\r\n        $scope.users = [];\r\n        $scope.theme = 'red';\r\n\r\n        $scope.add = function()\r\n        {\r\n            $location.path('/access_control/users/add');\r\n        };\r\n\r\n        $scope.menu = function()\r\n        {\r\n            $mdSidenav('menu').open();\r\n        };\r\n\r\n        $scope.modules = function()\r\n        {\r\n            $location.path('/modules');\r\n        };\r\n\r\n        $scope.regex = function(actual, expected)\r\n        {\r\n            return actual.match(new RegExp(expected, 'i'));\r\n        };\r\n\r\n        $scope.userManagement = function()\r\n        {\r\n            $location.path('/access_control/users');\r\n            $mdSidenav('menu').close();\r\n        };\r\n\r\n        // Recursive loader with limit of 10\r\n        var page = 0;\r\n        var limit = 10;\r\n        var load = function()\r\n        {\r\n            var options = {};\r\n            options.limit = limit;\r\n\r\n            page += 1;\r\n            if (page > 1) {\r\n                options.skip = limit * (page - 1);\r\n            }\r\n\r\n            User.query(options).$promise\r\n                .then(function(users)\r\n                {\r\n                    if (users.data.length < 1) {\r\n                        return;\r\n                    }\r\n\r\n                    $scope.users = $scope.users.concat(users.data);\r\n                    load();\r\n                });\r\n        };\r\n        load();\r\n    }]);\r\n","application.controller('LoginController', ['$location', '$scope', 'Auth', 'isGuest',\r\n    function($location, $scope, Auth, isGuest)\r\n    {\r\n        $scope.credentials = {\r\n            username: '',\r\n            password: '',\r\n        };\r\n\r\n        $scope.login = function(credentials)\r\n        {\r\n            Auth.verify(credentials)\r\n                .then(function (session) {\r\n                    $location.path('/modules');\r\n                });\r\n        };\r\n    }]);\r\n","application.controller('ModulesController', ['$location', '$scope', '$timeout', 'Auth', 'isLogged', 'session',\r\n    function($location, $scope, $timeout, Auth, isLogged, session)\r\n    {\r\n        $scope.accessControl = function()\r\n        {\r\n            $timeout(function()\r\n            {\r\n                $location.path('/access_control/users');\r\n            }, 500);\r\n        };\r\n\r\n        $scope.logout = function()\r\n        {\r\n            $timeout(function()\r\n            {\r\n                Auth.forget();\r\n            }, 500);\r\n        };\r\n    }]);\r\n","application.factory('API', ['Settings',\r\n    function(Settings)\r\n    {\r\n        var api = {};\r\n\r\n        api.access_token    = '/api/access_token';\r\n        api.session         = '/api/session';\r\n        api.users           = '/api/users/:user_id';\r\n        api.scopes          = '/api/scopes/:scope_id';\r\n        api.grants          = '/api/grants/:grant_id';\r\n        api.grantScopes     = '/api/grants/:grant_id/scopes/:scope_id';\r\n        api.clients         = '/api/clients/:client_id';\r\n        api.clientGrants    = '/api/clients/:client_id/grants/:grant_id';\r\n        api.clientScopes    = '/api/clients/:client_id/scopes/:scope_id';\r\n\r\n        api.get = function(endpoint)\r\n        {\r\n            return Settings.host.concat(api[endpoint]);\r\n        };\r\n\r\n        return api;\r\n    }]);\r\n","application.factory('Auth', ['$http', '$location', '$q', '$window', 'API', 'Settings',\r\n    function($http, $location, $q, $window, API, Settings)\r\n    {\r\n        var auth = {};\r\n\r\n        auth.forget = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            $window.localStorage.removeItem('expires_in');\r\n            $window.localStorage.removeItem('access_token');\r\n            $window.localStorage.removeItem('refresh_token');\r\n            $window.localStorage.removeItem('token_type');\r\n            $location.path('/login');\r\n\r\n            deferred.resolve();\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.handler = function(response)\r\n        {\r\n            $window.localStorage.expires_in      = response.data.expires_in;\r\n            $window.localStorage.access_token    = response.data.access_token;\r\n            $window.localStorage.refresh_token   = response.data.refresh_token;\r\n            $window.localStorage.token_type      = response.data.token_type;\r\n            return response;\r\n        };\r\n\r\n        auth.isGuest = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            auth.isLogged()\r\n                .then(function()\r\n                {\r\n                    deferred.reject('auth.is_guest');\r\n                })\r\n                .catch(function()\r\n                {\r\n                    deferred.resolve(true);\r\n                });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.isLogged = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            if ($window.localStorage.hasOwnProperty('expires_in') &&\r\n                $window.localStorage.hasOwnProperty('access_token') &&\r\n                $window.localStorage.hasOwnProperty('refresh_token') &&\r\n                $window.localStorage.hasOwnProperty('token_type')) {\r\n                deferred.resolve(true);\r\n            } else {\r\n                deferred.reject('auth.is_logged');\r\n            }\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.refresh = function()\r\n        {\r\n            var data = {\r\n                grant_type: 'refresh_token',\r\n                client_id: Settings.client_id,\r\n                client_secret: Settings.client_secret,\r\n                scope: Settings.scopes.join(),\r\n                refresh_token: $window.localStorage.refresh_token,\r\n            };\r\n\r\n            return $http.post(API.get('access_token'), data)\r\n                .then(auth.handler);\r\n        };\r\n\r\n        auth.session = function()\r\n        {\r\n            return $http.get(API.get('session'));\r\n        };\r\n\r\n        auth.verify = function(credentials)\r\n        {\r\n            var data = {\r\n                grant_type: 'password',\r\n                client_id: Settings.client_id,\r\n                client_secret: Settings.client_secret,\r\n                scope: Settings.scopes.join(),\r\n                username: credentials['username'],\r\n                password: credentials['password'],\r\n            };\r\n\r\n            return $http.post(API.get('access_token'), data)\r\n                .then(auth.handler);\r\n        };\r\n\r\n        return auth;\r\n    }]);\r\n\r\napplication.factory('AuthInterceptor', ['$injector', '$q', '$translate', '$window',\r\n    function($injector, $q, $translate, $window)\r\n    {\r\n        var refreshPromise = null;\r\n\r\n        var authInterceptor = {};\r\n\r\n        authInterceptor.request = function(config)\r\n        {\r\n            if ($injector.get('Auth').isLogged()) {\r\n                var token_type = $window.localStorage.token_type;\r\n                var access_token = $window.localStorage.access_token;\r\n                config.headers.Authorization = token_type + ' ' + access_token;\r\n            }\r\n\r\n            return config;\r\n        };\r\n\r\n        authInterceptor.responseError = function(rejection)\r\n        {\r\n            console.error(rejection);\r\n\r\n            switch (rejection.status) {\r\n                case 401:\r\n                    refreshPromise = refreshPromise ? refreshPromise :\r\n                        $injector.get('Auth').refresh();\r\n\r\n                    return refreshPromise.finally(function()\r\n                        {\r\n                            refreshPromise = null;\r\n                        })\r\n                        .then(function()\r\n                        {\r\n                            return $injector.get('$http')(rejection.config);\r\n                        });\r\n\r\n                case 422:\r\n                    $translate('toast_validation_failed')\r\n                        .then(function(text)\r\n                        {\r\n                            var $mdToast = $injector.get('$mdToast');\r\n                            var toast = $mdToast.simple()\r\n                                .content(text)\r\n                                .position('bottom left right');\r\n                            $mdToast.show(toast);\r\n                        });\r\n\r\n                    return $q.reject(rejection);\r\n\r\n                case 500:\r\n                    if (rejection.data.message == 'The user credentials were incorrect.') {\r\n                        $translate('toast_incorrect_credentials')\r\n                            .then(function(text)\r\n                            {\r\n                                var $mdToast = $injector.get('$mdToast');\r\n                                var toast = $mdToast.simple()\r\n                                    .content(text)\r\n                                    .position('bottom left right');\r\n                                $mdToast.show(toast);\r\n                            });\r\n\r\n                        return $q.reject(rejection);\r\n                    }\r\n\r\n                    if (rejection.data.message == 'The refresh token is invalid.') {\r\n                        $translate('toast_invalid_refresh_token')\r\n                            .then(function(text)\r\n                            {\r\n                                var $mdToast = $injector.get('$mdToast');\r\n                                var toast = $mdToast.simple()\r\n                                    .content(text)\r\n                                    .position('bottom left right');\r\n                                $mdToast.show(toast);\r\n                            });\r\n                    }\r\n\r\n                    $injector.get('Auth')\r\n                        .forget();\r\n\r\n                    return $q.reject(rejection);\r\n            }\r\n        };\r\n\r\n        return authInterceptor;\r\n    }]);\r\n","application.factory('Settings', [\r\n    function()\r\n    {\r\n        var settings = {};\r\n\r\n        settings.host           = 'http://homestead.app';\r\n        settings.client_id      = '1111111111111111111111111111111111111111';\r\n        settings.client_secret  = 'passwordpasswordpasswordpasswordpassword';\r\n\r\n        settings.scopes = [\r\n            'create_client_data',\r\n            'read_client_data',\r\n            'update_client_data',\r\n            'delete_client_data',\r\n\r\n            'create_grant_data',\r\n            'read_grant_data',\r\n            'update_grant_data',\r\n            'delete_grant_data',\r\n\r\n            'create_scope_data',\r\n            'read_scope_data',\r\n            'update_scope_data',\r\n            'delete_scope_data',\r\n\r\n            'create_user_data',\r\n            'read_user_data',\r\n            'update_user_data',\r\n            'delete_user_data',\r\n        ];\r\n\r\n\r\n        return settings;\r\n    }]);\r\n","application.factory('User', ['$resource', 'API',\r\n    function($resource, API)\r\n    {\r\n        return $resource(API.get('users'), {\r\n                user_id: '@id',\r\n            }, {\r\n                delete: {\r\n                    method: 'DELETE',\r\n                },\r\n                get: {\r\n                    method: 'GET',\r\n                },\r\n                save: {\r\n                    method: 'POST',\r\n                },\r\n                query: {\r\n                    method: 'GET',\r\n                    isArray: false,\r\n                },\r\n                update: {\r\n                    method: 'PUT',\r\n                },\r\n            });\r\n    }]);\r\n"],"sourceRoot":"/source/"}