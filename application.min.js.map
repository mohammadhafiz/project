{"version":3,"sources":["application.js","en.js","ms.js","login_controller.js","modules_controller.js","api.js","auth.js","settings.js","user.js"],"names":["application","angular","module","config","$locationProvider","$routeProvider","html5Mode","hashPrefix","when","controller","templateUrl","resolve","guest_only","$q","Auth","deferred","defer","isLogged","reject","promise","member_only","otherwise","redirectTo","run","$location","$rootScope","$on","event","current","previous","rejection","path","$mdThemingProvider","theme","primaryPalette","accentPalette","warnPalette","backgroundPalette","$translateProvider","useSanitizeValueStrategy","preferredLanguage","$httpProvider","defaults","headers","common","Accept","post","Content-Type","put","delete","interceptors","push","translations","action_login","action_logout","label_password","label_username","placeholder","title_access_control","title_arrears_management","title_login","title_modules","title_settings","toast_incorrect_credentials","validation_maxlength_24","validation_minlength_4","validation_required","button_login","$scope","credentials","username","password","login","verify","then","session","$timeout","User","users","query","$promise","console","log","logout","forget","factory","Settings","api","access_token","scopes","grants","grantScopes","clients","clientGrants","clientScopes","get","endpoint","host","concat","$http","$window","API","auth","localStorage","removeItem","handler","response","expires_in","data","refresh_token","token_type","hasOwnProperty","refresh","grant_type","client_id","client_secret","scope","join","$injector","$translate","refreshPromise","authInterceptor","request","Authorization","responseError","error","status","message","text","$mdToast","toast","simple","content","position","show","settings","$resource","user_id","method","save","isArray","update"],"mappings":"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","file":"application.min.js","sourcesContent":["var application = angular.module('application', [\r\n    'ngAnimate',\r\n    'ngAria',\r\n    'ngMaterial',\r\n    'ngMessageFormat',\r\n    'ngMessages',\r\n    'ngResource',\r\n    'ngRoute',\r\n    'ngSanitize',\r\n    'pascalprecht.translate', // angular-translate\r\n    'application.templates', // application templates cache\r\n]);\r\n\r\napplication.config(['$locationProvider', '$routeProvider',\r\n    function($locationProvider, $routeProvider)\r\n    {\r\n        $locationProvider.html5Mode(true)\r\n            .hashPrefix('#!');\r\n\r\n        $routeProvider\r\n            .when('/login', {\r\n                controller: 'LoginController',\r\n                templateUrl: '/templates/login.html',\r\n                resolve: {\r\n                    guest_only: ['$q', 'Auth', function($q, Auth)\r\n                    {\r\n                        var deferred = $q.defer();\r\n                        if (! Auth.isLogged()) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject('guest_only');\r\n                        }\r\n                        return deferred.promise;\r\n                    }],\r\n                },\r\n            })\r\n            .when('/modules', {\r\n                controller: 'ModulesController',\r\n                templateUrl: '/templates/modules.html',\r\n                resolve: {\r\n                    member_only: ['$q', 'Auth', function($q, Auth)\r\n                    {\r\n                        var deferred = $q.defer();\r\n                        if (Auth.isLogged()) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject('member_only');\r\n                        }\r\n                        return deferred.promise;\r\n                    }],\r\n                },\r\n            })\r\n            .when('/access_control', {\r\n            })\r\n            .otherwise({\r\n                redirectTo: '/login',\r\n            });\r\n    }]);\r\n\r\napplication.run(['$location', '$rootScope',\r\n    function($location, $rootScope)\r\n    {\r\n        $rootScope.$on('$routeChangeError', function(event, current, previous, rejection)\r\n        {\r\n            switch (rejection) {\r\n                case 'guest_only':\r\n                    $location.path('/modules');\r\n                    break;\r\n                case 'member_only':\r\n                    $location.path('/login');\r\n                    break;\r\n            }\r\n        });\r\n    }]);\r\n\r\napplication.config(['$mdThemingProvider',\r\n    function($mdThemingProvider)\r\n    {\r\n        $mdThemingProvider.theme('default')\r\n            .primaryPalette('indigo')\r\n            .accentPalette('pink')\r\n            .warnPalette('orange')\r\n            .backgroundPalette('grey');\r\n\r\n        $mdThemingProvider.theme('indigo')\r\n            .primaryPalette('indigo')\r\n            .accentPalette('pink')\r\n            .warnPalette('orange')\r\n            .backgroundPalette('grey');\r\n\r\n        $mdThemingProvider.theme('indigoBackground')\r\n            .primaryPalette('indigo')\r\n            .accentPalette('pink')\r\n            .warnPalette('orange')\r\n            .backgroundPalette('indigo');\r\n    }]);\r\n\r\napplication.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.useSanitizeValueStrategy('sanitize');\r\n        $translateProvider.preferredLanguage('en');\r\n    }]);\r\n\r\napplication.config(['$httpProvider',\r\n    function($httpProvider)\r\n    {\r\n        $httpProvider.defaults.headers = {\r\n            common: {\r\n                Accept: 'application/vnd.menggaris.v1+json',\r\n            },\r\n            post: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            put: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            delete: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        };\r\n\r\n        $httpProvider.interceptors.push('AuthInterceptor');\r\n    }]);\r\n","application.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.translations('en', {\r\n            'action_login': 'Log in',\r\n            'action_logout': 'Log out',\r\n\r\n            'label_password': 'Password',\r\n            'label_username': 'Username',\r\n\r\n            'placeholder': 'Placeholder',\r\n\r\n            'title_access_control': 'Access Control',\r\n            'title_arrears_management': 'Arrears Management',\r\n            'title_login': 'Login',\r\n            'title_modules': 'Modules',\r\n            'title_settings': 'Settings',\r\n\r\n            'toast_incorrect_credentials': 'The user credentials is incorrect.',\r\n\r\n            'validation_maxlength_24': 'This field may not be greater than 24 characters.',\r\n            'validation_minlength_4': 'This field must be at least 4 characters.',\r\n            'validation_required': 'This field is required.',\r\n        });\r\n    }]);\r\n","application.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.translations('ms', {\r\n            'title_login': 'Log masuk',\r\n            'label_username': 'Kata nama',\r\n            'label_password': 'Kata kunci',\r\n            'button_login': 'Log masuk',\r\n        });\r\n    }]);\r\n","application.controller('LoginController', ['$location', '$scope', 'Auth',\r\n    function($location, $scope, Auth)\r\n    {\r\n        $scope.credentials = {\r\n            username: '',\r\n            password: '',\r\n        };\r\n\r\n        $scope.login = function(credentials)\r\n        {\r\n            Auth.verify(credentials)\r\n                .then(function (session) {\r\n                    $location.path('/modules');\r\n                });\r\n        };\r\n    }]);\r\n","application.controller('ModulesController', ['$location', '$scope', '$timeout', 'Auth', 'User',\r\n    function($location, $scope, $timeout, Auth, User)\r\n    {\r\n        var users = User.query();\r\n        users.$promise\r\n            .then(function(users)\r\n            {\r\n                console.log(users);\r\n            });\r\n\r\n        $scope.logout = function()\r\n        {\r\n            $timeout(function()\r\n            {\r\n                Auth.forget();\r\n            }, 300);\r\n        };\r\n    }]);\r\n","application.factory('API', ['Settings',\r\n    function(Settings)\r\n    {\r\n        var api = {};\r\n\r\n        api.access_token    = '/api/access_token';\r\n        api.session         = '/api/session';\r\n        api.users           = '/api/users/:user_id';\r\n        api.scopes          = '/api/scopes/:scope_id';\r\n        api.grants          = '/api/grants/:grant_id';\r\n        api.grantScopes     = '/api/grants/:grant_id/scopes/:scope_id';\r\n        api.clients         = '/api/clients/:client_id';\r\n        api.clientGrants    = '/api/clients/:client_id/grants/:grant_id';\r\n        api.clientScopes    = '/api/clients/:client_id/scopes/:scope_id';\r\n\r\n        api.get = function(endpoint)\r\n        {\r\n            return Settings.host.concat(api[endpoint]);\r\n        };\r\n\r\n        return api;\r\n    }]);\r\n","application.factory('Auth', ['$http', '$location', '$q', '$window', 'API', 'Settings',\r\n    function($http, $location, $q, $window, API, Settings)\r\n    {\r\n        var auth = {};\r\n\r\n        auth.forget = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            $window.localStorage.removeItem('expires_in');\r\n            $window.localStorage.removeItem('access_token');\r\n            $window.localStorage.removeItem('refresh_token');\r\n            $window.localStorage.removeItem('token_type');\r\n            $location.path('/');\r\n\r\n            deferred.resolve();\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.handler = function(response)\r\n        {\r\n            $window.localStorage.expires_in      = response.data.expires_in;\r\n            $window.localStorage.access_token    = response.data.access_token;\r\n            $window.localStorage.refresh_token   = response.data.refresh_token;\r\n            $window.localStorage.token_type      = response.data.token_type;\r\n            return response;\r\n        };\r\n\r\n        auth.isLogged = function()\r\n        {\r\n            return $window.localStorage.hasOwnProperty('expires_in') &&\r\n                $window.localStorage.hasOwnProperty('access_token') &&\r\n                $window.localStorage.hasOwnProperty('refresh_token') &&\r\n                $window.localStorage.hasOwnProperty('token_type');\r\n        };\r\n\r\n        auth.refresh = function()\r\n        {\r\n            var data = {\r\n                grant_type: 'refresh_token',\r\n                client_id: Settings.client_id,\r\n                client_secret: Settings.client_secret,\r\n                scope: Settings.scopes.join(),\r\n                refresh_token: $window.localStorage.refresh_token,\r\n            };\r\n\r\n            return $http.post(API.get('access_token'), data)\r\n                .then(auth.handler);\r\n        };\r\n\r\n        auth.verify = function(credentials)\r\n        {\r\n            var data = {\r\n                grant_type: 'password',\r\n                client_id: Settings.client_id,\r\n                client_secret: Settings.client_secret,\r\n                scope: Settings.scopes.join(),\r\n                username: credentials['username'],\r\n                password: credentials['password'],\r\n            };\r\n\r\n            return $http.post(API.get('access_token'), data)\r\n                .then(auth.handler);\r\n        };\r\n\r\n        return auth;\r\n    }]);\r\n\r\napplication.factory('AuthInterceptor', ['$injector', '$q', '$translate', '$window',\r\n    function($injector, $q, $translate, $window)\r\n    {\r\n        var refreshPromise = null;\r\n\r\n        var authInterceptor = {};\r\n\r\n        authInterceptor.request = function(config)\r\n        {\r\n            if ($injector.get('Auth').isLogged()) {\r\n                var token_type = $window.localStorage.token_type;\r\n                var access_token = $window.localStorage.access_token;\r\n                config.headers.Authorization = token_type + ' ' + access_token;\r\n            }\r\n\r\n            return config;\r\n        };\r\n\r\n        authInterceptor.responseError = function(rejection)\r\n        {\r\n            console.error(rejection);\r\n\r\n            switch (rejection.status) {\r\n                case 401:\r\n                    refreshPromise = refreshPromise ? refreshPromise :\r\n                        $injector.get('Auth').refresh();\r\n\r\n                    return refreshPromise.finally(function()\r\n                        {\r\n                            refreshPromise = null;\r\n                        })\r\n                        .then(function()\r\n                        {\r\n                            return $injector.get('$http')(rejection.config);\r\n                        });\r\n                case 500:\r\n                    if (rejection.data.message == 'The user credentials were incorrect.') {\r\n                        $translate('toast_incorrect_credentials')\r\n                            .then(function(text)\r\n                            {\r\n                                var $mdToast = $injector.get('$mdToast');\r\n                                var toast = $mdToast.simple()\r\n                                    .content(text)\r\n                                    .position('bottom left right');\r\n                                $mdToast.show(toast);\r\n                            });\r\n\r\n                        return $q.reject(rejection);\r\n                    }\r\n\r\n                    return $injector.get('Auth')\r\n                        .forget();\r\n            }\r\n        };\r\n\r\n        return authInterceptor;\r\n    }]);\r\n","application.factory('Settings', [\r\n    function()\r\n    {\r\n        var settings = {};\r\n\r\n        settings.host           = 'http://homestead.app';\r\n        settings.client_id      = '1111111111111111111111111111111111111111';\r\n        settings.client_secret  = 'passwordpasswordpasswordpasswordpassword';\r\n\r\n        settings.scopes = [\r\n            'create_client_data',\r\n            'read_client_data',\r\n            'update_client_data',\r\n            'delete_client_data',\r\n\r\n            'create_grant_data',\r\n            'read_grant_data',\r\n            'update_grant_data',\r\n            'delete_grant_data',\r\n\r\n            'create_scope_data',\r\n            'read_scope_data',\r\n            'update_scope_data',\r\n            'delete_scope_data',\r\n\r\n            'create_user_data',\r\n            'read_user_data',\r\n            'update_user_data',\r\n            'delete_user_data',\r\n        ];\r\n\r\n\r\n        return settings;\r\n    }]);\r\n","application.factory('User', ['$resource', 'API',\r\n    function($resource, API)\r\n    {\r\n        return $resource(API.get('users'), {\r\n                user_id: '@id',\r\n            }, {\r\n                delete: {\r\n                    method: 'DELETE',\r\n                },\r\n                get: {\r\n                    method: 'GET',\r\n                },\r\n                save: {\r\n                    method: 'POST',\r\n                },\r\n                query: {\r\n                    method: 'GET',\r\n                    isArray: false,\r\n                },\r\n                update: {\r\n                    method: 'PUT',\r\n                },\r\n            });\r\n    }]);\r\n"],"sourceRoot":"/source/"}