{"version":3,"sources":["application.js","routes.js","en.js","ms.js","access_control_controller.js","login_controller.js","modules_controller.js","access_control/users_controller.js","access_control/users/create_controller.js","access_control/users/read_controller.js","api.js","auth.js","http_interceptor.js","user.js"],"names":["application","angular","module","config","$httpProvider","defaults","headers","common","Accept","post","Content-Type","put","delete","interceptors","push","$mdThemingProvider","alwaysWatchTheme","theme","primaryPalette","accentPalette","default","$translateProvider","useSanitizeValueStrategy","preferredLanguage","$locationProvider","$routeProvider","html5Mode","hashPrefix","when","controller","templateUrl","resolve","isGuest","Auth","isLogged","session","user","$route","User","get","user_id","current","params","$promise","otherwise","redirectTo","run","$location","$rootScope","$on","event","previous","rejection","path","forget","translations","action_add","action_back","action_cancel","action_delete","action_login","action_logout","action_menu","action_more","action_search","action_add_user","dialog_content_delete_record","dialog_title_delete_record","label_created_at","label_password","label_password_confirmation","label_updated_at","label_username","placeholder","title_access_control","title_arrears_management","title_client_management","title_grant_management","title_login","title_menu","title_modules","title_record_count","title_scope_management","title_settings","title_user_management","toast_incorrect_credentials","toast_invalid_refresh_token","toast_validation_failed","validation_maxlength_24","validation_minlength_4","validation_required","button_login","$scope","modules","clientManagement","grantManagement","scopeManagement","userManagement","credentials","username","password","login","verify","then","$timeout","accessControl","logout","$mdDialog","$mdSidenav","$translate","limit","page","users","add","$event","confirm","title","content","ok","cancel","targetEvent","dialog","show","id","splice","indexOf","load","options","skip","query","data","length","concat","menu","open","read","userId","regex","actual","expected","match","RegExp","password_confirmation","$save","back","factory","Settings","api","access_token","scopes","grants","grantScopes","clients","clientGrants","clientScopes","endpoint","host","$http","$q","$window","API","auth","deferred","defer","localStorage","removeItem","promise","handler","response","expires_in","refresh_token","token_type","reject","hasOwnProperty","refresh","grant_type","client_id","client_secret","scope","join","$injector","refreshPromise","httpInterceptor","request","Authorization","responseError","console","error","status","text","$mdToast","toast","simple","position","message","$resource","method","save","isArray","update"],"mappings":"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","file":"application.min.js","sourcesContent":["var application = angular.module('application', [\r\n    'ngAnimate',\r\n    'ngAria',\r\n    'ngMaterial',\r\n    'ngMessageFormat',\r\n    'ngMessages',\r\n    'ngResource',\r\n    'ngRoute',\r\n    'ngSanitize',\r\n    'pascalprecht.translate', // angular-translate\r\n    'application.settings', // application settings\r\n    'application.templates', // application templates cache\r\n]);\r\n\r\napplication.config(['$httpProvider',\r\n    function($httpProvider)\r\n    {\r\n        $httpProvider.defaults.headers = {\r\n            common: {\r\n                Accept: 'application/vnd.menggaris.v1+json',\r\n            },\r\n            post: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            put: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            delete: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        };\r\n\r\n        $httpProvider.interceptors.push('HttpInterceptor');\r\n    }]);\r\n\r\napplication.config(['$mdThemingProvider',\r\n    function($mdThemingProvider)\r\n    {\r\n        $mdThemingProvider.alwaysWatchTheme(true);\r\n\r\n        $mdThemingProvider.theme('red')\r\n            .primaryPalette('red')\r\n            .accentPalette('indigo');\r\n\r\n        $mdThemingProvider.theme('white')\r\n            .primaryPalette('grey', {\r\n                default: '200',\r\n            })\r\n            .accentPalette('blue');\r\n    }]);\r\n\r\napplication.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.useSanitizeValueStrategy('sanitize');\r\n        $translateProvider.preferredLanguage('en');\r\n    }]);\r\n","application.config(['$locationProvider', '$routeProvider',\r\n    function($locationProvider, $routeProvider)\r\n    {\r\n        $locationProvider.html5Mode(true)\r\n            .hashPrefix('#!');\r\n\r\n        $routeProvider\r\n            .when('/login', {\r\n                controller: 'LoginController',\r\n                templateUrl: 'login.html',\r\n                resolve: {\r\n                    isGuest: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isGuest();\r\n                    }],\r\n                },\r\n            })\r\n            .when('/modules', {\r\n                controller: 'ModulesController',\r\n                templateUrl: 'modules.html',\r\n                resolve: {\r\n                    isLogged: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isLogged();\r\n                    }],\r\n                    session: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.session();\r\n                    }],\r\n                },\r\n            })\r\n            .when('/access_control/users', {\r\n                controller: 'AccessControlUsersController',\r\n                templateUrl: 'access_control/users.html',\r\n                resolve: {\r\n                    isLogged: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isLogged();\r\n                    }],\r\n                },\r\n            })\r\n            .when('/access_control/users/add', {\r\n                controller: 'AccessControlUsersCreateController',\r\n                templateUrl: 'access_control/users/create.html',\r\n                resolve: {\r\n                    isLogged: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isLogged();\r\n                    }],\r\n                },\r\n            })\r\n            .when('/access_control/users/:user_id', {\r\n                controller: 'AccessControlUsersReadController',\r\n                templateUrl: 'access_control/users/read.html',\r\n                resolve: {\r\n                    isLogged: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isLogged();\r\n                    }],\r\n                    user: ['$route', 'User', function($route, User)\r\n                    {\r\n                        return User.get({\r\n                            user_id: $route.current.params.user_id,\r\n                        }).$promise;\r\n                    }],\r\n                },\r\n            })\r\n            .when('/access_control/clients', {\r\n\r\n            })\r\n            .when('/access_control/grants', {})\r\n            .when('/access_control/scopes', {})\r\n            .otherwise({\r\n                redirectTo: '/login',\r\n            });\r\n    }]);\r\n\r\napplication.run(['$location', '$rootScope', 'Auth',\r\n    function($location, $rootScope, Auth)\r\n    {\r\n        $rootScope.$on('$routeChangeError', function(event, current, previous, rejection)\r\n        {\r\n            switch (rejection) {\r\n                case 'auth.is_guest':\r\n                    $location.path('/modules');\r\n                    break;\r\n                case 'auth.is_logged':\r\n                    Auth.forget();\r\n                    break;\r\n            }\r\n        });\r\n    }]);\r\n","application.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.translations('en', {\r\n            'action_add': 'Add',\r\n            'action_back': 'Go back',\r\n            'action_cancel': 'Cancel',\r\n            'action_delete': 'Delete',\r\n            'action_login': 'Log in',\r\n            'action_logout': 'Log out',\r\n            'action_menu': 'Menu',\r\n            'action_more': 'More',\r\n            'action_search': 'Search',\r\n            'action_add_user': 'Add new user',\r\n\r\n            'dialog_content_delete_record': 'Deleted record cannot be restored.',\r\n            'dialog_title_delete_record': 'Would you like to delete this record?',\r\n\r\n            'label_created_at': 'Created At',\r\n            'label_password': 'Password',\r\n            'label_password_confirmation': 'Password Confirmation',\r\n            'label_updated_at': 'Updated At',\r\n            'label_username': 'Username',\r\n\r\n            'placeholder': 'Placeholder',\r\n\r\n            'title_access_control': 'Access Control',\r\n            'title_arrears_management': 'Arrears Management',\r\n            'title_client_management': 'Client Management',\r\n            'title_grant_management': 'Grant Management',\r\n            'title_login': 'Log In',\r\n            'title_menu': 'Menu',\r\n            'title_modules': 'Module List',\r\n            'title_record_count': 'Showing total of {{ length }} record',\r\n            'title_scope_management': 'Scope Management',\r\n            'title_settings': 'Settings',\r\n            'title_user_management': 'User Management',\r\n\r\n            'toast_incorrect_credentials': 'The user credentials is incorrect.',\r\n            'toast_invalid_refresh_token': 'The refresh token is invalid.',\r\n            'toast_validation_failed': 'Validation failed on server.',\r\n\r\n            'validation_maxlength_24': 'This field may not be greater than 24 characters.',\r\n            'validation_minlength_4': 'This field must be at least 4 characters.',\r\n            'validation_required': 'This field is required.',\r\n        });\r\n    }]);\r\n","application.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.translations('ms', {\r\n            'title_login': 'Log masuk',\r\n            'label_username': 'Kata nama',\r\n            'label_password': 'Kata kunci',\r\n            'button_login': 'Log masuk',\r\n        });\r\n    }]);\r\n","application.controller('AccessControlController', ['$location', '$scope',\r\n    function($location, $scope)\r\n    {\r\n        $scope.modules = function()\r\n        {\r\n            $location.path('/modules');\r\n        };\r\n\r\n        $scope.clientManagement = function()\r\n        {\r\n            $location.path('/access_control/clients');\r\n        };\r\n\r\n        $scope.grantManagement = function()\r\n        {\r\n            $location.path('/access_control/grants');\r\n        };\r\n\r\n        $scope.scopeManagement = function()\r\n        {\r\n            $location.path('/access_control/scopes');\r\n        };\r\n\r\n        $scope.userManagement = function()\r\n        {\r\n            $location.path('/access_control/users');\r\n        };\r\n    }]);\r\n","application.controller('LoginController', ['$location', '$scope', 'Auth', 'isGuest',\r\n    function($location, $scope, Auth, isGuest)\r\n    {\r\n        $scope.credentials = {\r\n            username: '',\r\n            password: '',\r\n        };\r\n\r\n        $scope.login = function(credentials)\r\n        {\r\n            Auth.verify(credentials)\r\n                .then(function (session) {\r\n                    $location.path('/modules');\r\n                });\r\n        };\r\n    }]);\r\n","application.controller('ModulesController', ['$location', '$scope', '$timeout', 'Auth', 'isLogged', 'session',\r\n    function($location, $scope, $timeout, Auth, isLogged, session)\r\n    {\r\n        $scope.accessControl = function()\r\n        {\r\n            $timeout(function()\r\n            {\r\n                $location.path('/access_control/users');\r\n            }, 500);\r\n        };\r\n\r\n        $scope.logout = function()\r\n        {\r\n            $timeout(function()\r\n            {\r\n                Auth.forget();\r\n            }, 500);\r\n        };\r\n    }]);\r\n","application.controller('AccessControlUsersController', ['$location', '$mdDialog', '$mdSidenav', '$scope', '$translate', 'User',\r\n    function($location, $mdDialog, $mdSidenav, $scope, $translate, User)\r\n    {\r\n        $scope.limit = 50;\r\n        $scope.page = 0;\r\n        $scope.theme = 'red';\r\n        $scope.users = [];\r\n\r\n        $scope.add = function()\r\n        {\r\n            $location.path('/access_control/users/add');\r\n        };\r\n\r\n        $scope.delete = function($event, user)\r\n        {\r\n            $translate([\r\n                'dialog_title_delete_record',\r\n                'dialog_content_delete_record',\r\n                'action_delete',\r\n                'action_cancel',\r\n            ])\r\n            .then(function(translations)\r\n            {\r\n                return $mdDialog.confirm()\r\n                    .title(translations.dialog_title_delete_record)\r\n                    .content(translations.dialog_content_delete_record)\r\n                    .ok(translations.action_delete)\r\n                    .cancel(translations.action_cancel)\r\n                    .targetEvent($event);\r\n            }).then(function(dialog)\r\n            {\r\n                return $mdDialog.show(dialog);\r\n            })\r\n            .then(function()\r\n            {\r\n                return User.delete({\r\n                    user_id: user.id,\r\n                }).$promise;\r\n            })\r\n            .then(function()\r\n            {\r\n                $scope.users.splice($scope.users.indexOf(user), 1);\r\n                $location.path('/access_control/users');\r\n            });\r\n        };\r\n\r\n        $scope.load = function()\r\n        {\r\n            var options = {};\r\n            options.limit = $scope.limit;\r\n            if (++$scope.page > 1) options.skip = $scope.limit * ($scope.page - 1);\r\n\r\n            User.query(options).$promise\r\n                .then(function(users) {\r\n                    if (users.data.length < 1) return;\r\n                    $scope.users = $scope.users.concat(users.data);\r\n                    $scope.load();\r\n                });\r\n        };\r\n\r\n        $scope.menu = function()\r\n        {\r\n            $mdSidenav('menu').open();\r\n        };\r\n\r\n        $scope.read = function(userId)\r\n        {\r\n            $location.path('/access_control/users/' + userId);\r\n        };\r\n\r\n        $scope.regex = function(actual, expected)\r\n        {\r\n            return actual.match(new RegExp(expected, 'i'));\r\n        };\r\n\r\n        $scope.load();\r\n    }]);\r\n","application.controller('AccessControlUsersCreateController', ['$location', '$scope', 'User',\r\n    function($location, $scope, User)\r\n    {\r\n        $scope.data = {\r\n            username: '',\r\n            password: '',\r\n            password_confirmation: '',\r\n        };\r\n\r\n        $scope.add = function(data)\r\n        {\r\n            var user = new User(data);\r\n\r\n            user.$save()\r\n                .then(function()\r\n                {\r\n                    $location.path('/access_control/users');\r\n                })\r\n        };\r\n\r\n        $scope.back = function()\r\n        {\r\n            $location.path('/access_control/users');\r\n        };\r\n    }]);\r\n","application.controller('AccessControlUsersReadController', ['$location', '$mdDialog', '$scope', '$translate', 'User', 'user',\r\n    function($location, $mdDialog, $scope, $translate, User, user)\r\n    {\r\n        $scope.user = user.data;\r\n\r\n        $scope.back = function()\r\n        {\r\n            $location.path('/access_control/users');\r\n        };\r\n\r\n        $scope.delete = function($event, id)\r\n        {\r\n            $translate([\r\n                'dialog_title_delete_record',\r\n                'dialog_content_delete_record',\r\n                'action_delete',\r\n                'action_cancel',\r\n            ])\r\n            .then(function(translations)\r\n            {\r\n                return $mdDialog.confirm()\r\n                    .title(translations.dialog_title_delete_record)\r\n                    .content(translations.dialog_content_delete_record)\r\n                    .ok(translations.action_delete)\r\n                    .cancel(translations.action_cancel)\r\n                    .targetEvent($event);\r\n            }).then(function(dialog)\r\n            {\r\n                return $mdDialog.show(dialog);\r\n            })\r\n            .then(function()\r\n            {\r\n                return User.delete({\r\n                    user_id: id,\r\n                }).$promise;\r\n            })\r\n            .then(function()\r\n            {\r\n                $location.path('/access_control/users');\r\n            });\r\n        };\r\n    }]);\r\n","application.factory('API', ['Settings',\r\n    function(Settings)\r\n    {\r\n        var api = {};\r\n\r\n        api.access_token    = '/api/access_token';\r\n        api.session         = '/api/session';\r\n        api.users           = '/api/users/:user_id';\r\n        api.scopes          = '/api/scopes/:scope_id';\r\n        api.grants          = '/api/grants/:grant_id';\r\n        api.grantScopes     = '/api/grants/:grant_id/scopes/:scope_id';\r\n        api.clients         = '/api/clients/:client_id';\r\n        api.clientGrants    = '/api/clients/:client_id/grants/:grant_id';\r\n        api.clientScopes    = '/api/clients/:client_id/scopes/:scope_id';\r\n\r\n        api.get = function(endpoint)\r\n        {\r\n            return Settings.host.concat(api[endpoint]);\r\n        };\r\n\r\n        return api;\r\n    }]);\r\n","application.factory('Auth', ['$http', '$location', '$q', '$window', 'API', 'Settings',\r\n    function($http, $location, $q, $window, API, Settings)\r\n    {\r\n        var auth = {};\r\n\r\n        auth.forget = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            $window.localStorage.removeItem('expires_in');\r\n            $window.localStorage.removeItem('access_token');\r\n            $window.localStorage.removeItem('refresh_token');\r\n            $window.localStorage.removeItem('token_type');\r\n            $location.path('/login');\r\n\r\n            deferred.resolve();\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.handler = function(response)\r\n        {\r\n            $window.localStorage.expires_in      = response.data.expires_in;\r\n            $window.localStorage.access_token    = response.data.access_token;\r\n            $window.localStorage.refresh_token   = response.data.refresh_token;\r\n            $window.localStorage.token_type      = response.data.token_type;\r\n            return response;\r\n        };\r\n\r\n        auth.isGuest = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            auth.isLogged()\r\n                .then(function()\r\n                {\r\n                    deferred.reject('auth.is_guest');\r\n                })\r\n                .catch(function()\r\n                {\r\n                    deferred.resolve(true);\r\n                });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.isLogged = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            if ($window.localStorage.hasOwnProperty('expires_in') &&\r\n                $window.localStorage.hasOwnProperty('access_token') &&\r\n                $window.localStorage.hasOwnProperty('refresh_token') &&\r\n                $window.localStorage.hasOwnProperty('token_type')) {\r\n                deferred.resolve(true);\r\n            } else {\r\n                deferred.reject('auth.is_logged');\r\n            }\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.refresh = function()\r\n        {\r\n            var data = {\r\n                grant_type: 'refresh_token',\r\n                client_id: Settings.client_id,\r\n                client_secret: Settings.client_secret,\r\n                scope: Settings.scopes.join(),\r\n                refresh_token: $window.localStorage.refresh_token,\r\n            };\r\n\r\n            return $http.post(API.get('access_token'), data)\r\n                .then(auth.handler);\r\n        };\r\n\r\n        auth.session = function()\r\n        {\r\n            return $http.get(API.get('session'));\r\n        };\r\n\r\n        auth.verify = function(credentials)\r\n        {\r\n            var data = {\r\n                grant_type: 'password',\r\n                client_id: Settings.client_id,\r\n                client_secret: Settings.client_secret,\r\n                scope: Settings.scopes.join(),\r\n                username: credentials['username'],\r\n                password: credentials['password'],\r\n            };\r\n\r\n            return $http.post(API.get('access_token'), data)\r\n                .then(auth.handler);\r\n        };\r\n\r\n        return auth;\r\n    }]);\r\n\r\n","application.factory('HttpInterceptor', ['$injector', '$q', '$translate', '$window',\r\n    function($injector, $q, $translate, $window)\r\n    {\r\n        var refreshPromise = null;\r\n\r\n        var httpInterceptor = {};\r\n\r\n        httpInterceptor.request = function(config)\r\n        {\r\n            if ($injector.get('Auth').isLogged()) {\r\n                var token_type = $window.localStorage.token_type;\r\n                var access_token = $window.localStorage.access_token;\r\n                config.headers.Authorization = token_type + ' ' + access_token;\r\n            }\r\n\r\n            return config;\r\n        };\r\n\r\n        httpInterceptor.responseError = function(rejection)\r\n        {\r\n            console.error(rejection);\r\n\r\n            switch (rejection.status) {\r\n                case 401:\r\n                    refreshPromise = refreshPromise ? refreshPromise :\r\n                        $injector.get('Auth').refresh();\r\n\r\n                    return refreshPromise.finally(function()\r\n                        {\r\n                            refreshPromise = null;\r\n                        })\r\n                        .then(function()\r\n                        {\r\n                            return $injector.get('$http')(rejection.config);\r\n                        });\r\n\r\n                case 422:\r\n                    $translate('toast_validation_failed')\r\n                        .then(function(text)\r\n                        {\r\n                            var $mdToast = $injector.get('$mdToast');\r\n                            var toast = $mdToast.simple()\r\n                                .content(text)\r\n                                .position('bottom left right');\r\n                            $mdToast.show(toast);\r\n                        });\r\n\r\n                    return $q.reject(rejection);\r\n\r\n                case 500:\r\n                    if (rejection.data.message == 'The user credentials were incorrect.') {\r\n                        $translate('toast_incorrect_credentials')\r\n                            .then(function(text)\r\n                            {\r\n                                var $mdToast = $injector.get('$mdToast');\r\n                                var toast = $mdToast.simple()\r\n                                    .content(text)\r\n                                    .position('bottom left right');\r\n                                $mdToast.show(toast);\r\n                            });\r\n\r\n                        return $q.reject(rejection);\r\n                    }\r\n\r\n                    if (rejection.data.message == 'The refresh token is invalid.') {\r\n                        $translate('toast_invalid_refresh_token')\r\n                            .then(function(text)\r\n                            {\r\n                                var $mdToast = $injector.get('$mdToast');\r\n                                var toast = $mdToast.simple()\r\n                                    .content(text)\r\n                                    .position('bottom left right');\r\n                                $mdToast.show(toast);\r\n                            });\r\n                    }\r\n\r\n                    $injector.get('Auth')\r\n                        .forget();\r\n\r\n                    return $q.reject(rejection);\r\n            }\r\n        };\r\n\r\n        return httpInterceptor;\r\n    }]);\r\n","application.factory('User', ['$resource', 'API',\r\n    function($resource, API)\r\n    {\r\n        return $resource(API.get('users'), {\r\n                user_id: '@id',\r\n            }, {\r\n                delete: {\r\n                    method: 'DELETE',\r\n                },\r\n                get: {\r\n                    method: 'GET',\r\n                },\r\n                save: {\r\n                    method: 'POST',\r\n                },\r\n                query: {\r\n                    method: 'GET',\r\n                    isArray: false,\r\n                },\r\n                update: {\r\n                    method: 'PUT',\r\n                },\r\n            });\r\n    }]);\r\n"],"sourceRoot":"/source/"}